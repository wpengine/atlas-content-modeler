# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1
orbs:
  wp-product-orb: wpengine/wp-product-orb@1.3.0
  php: circleci/php@1.1.0
  node: circleci/node@4.1.0

jobs:
  lint:
    executor:
      name: node/default
      tag: lts
    parameters:
      slug:
        type: string
    steps:
      - attach_workspace:
          at: .
      - node/install-packages:
          app-dir: <<parameters.slug>>
      - run: npm run style
      - run: npm run lint

  checkout:
    executor: wp-product-orb/default
    parameters:
      slug:
        type: string
    steps:
      - checkout:
          path: <<parameters.slug>>
      - persist_to_workspace:
          root: .
          paths:
            - .

  plugin-checkout:
    executor: wp-product-orb/default
    environment:
      WPE_SESSION_DIR: ./.wpe
    parameters:
      slug:
        type: string
      filename:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Make artifacts build directory
          command: |
            [ ! -d "build" ] && mkdir build &>/dev/null
      - wp-product-orb/get-version-from-php:
          filename: <<parameters.slug>>/<<parameters.filename>>
          return_var: BUILD_VERSION
      - wp-product-orb/variable:
          var: BUILD_VERSION
          value: $BUILD_VERSION
      - persist_to_workspace:
          root: .
          paths:
            - .

  plugin-composer:
    executor: php/default
    parameters:
      slug:
        type: string
    steps:
      - attach_workspace:
          at: .
      - php/install-composer
      - php/install-packages:
          app-dir: <<parameters.slug>>
      - run:
          name: Remove composer setup file
          command: |
            rm -v composer-setup.php
      - run:
          name: Composer PHP lint and code sniffer
          command: |
            /usr/local/bin/composer lint && /usr/local/bin/composer phpcs
          working_directory: <<parameters.slug>>
      - persist_to_workspace:
          root: .
          paths:
            - .

  plugin-test:
    docker:
      - image: cimg/php:7.4
      - image: circleci/mysql:5.7
        environment:
          MYSQL_DATABASE: wp_database
          MYSQL_USER: wp_user
          MYSQL_PASSWORD: wp_pass
          MYSQL_ROOT_PASSWORD: password
    parameters:
      slug:
        type: string
    steps:
      - attach_workspace:
          at: .
      - php/install-composer
      - php/install-packages:
          app-dir: <<parameters.slug>>
      - run:
          name: Remove composer setup file
          command: |
            rm -v composer-setup.php
      - run:
          name: Install Subversion package
          command: |
            sudo apt-get update -yq
            sudo apt-get install subversion -yq
      - run:
          name: Setup WordPress testing framework
          command: |
            /bin/bash tests/install-wp-tests.sh wp_database wp_user wp_pass 127.0.0.1 latest true
          working_directory: <<parameters.slug>>
      - run:
          name: Run testing suite
          command: |
            composer test
          working_directory: <<parameters.slug>>

  plugin-bundle-zip:
    executor: wp-product-orb/default
    environment:
      WPE_SESSION_DIR: ./.wpe
    parameters:
      slug:
        type: string
    steps:
      - attach_workspace:
          at: .
      - wp-product-orb/variable-load
      - run:
          name: "Bundle plugin files into a zip"
          command: |
            zip --verbose -x@<<parameters.slug>>/.zipignore -x *.wpe/* */build/ -r "build/<<parameters.slug>>.$BUILD_VERSION.zip" <<parameters.slug>>
      - store_artifacts:
          path: build
      - persist_to_workspace:
          root: .
          paths:
            - build

  plugin-bundle-json:
    executor: wp-product-orb/parser
    environment:
      WPE_SESSION_DIR: ./.wpe
    parameters:
      slug:
        type: string
    steps:
      - attach_workspace:
          at: .
      - wp-product-orb/variable-load
      - wp-product-orb/parse-wp-readme:
          infile: <<parameters.slug>>/readme.txt
          outfile: build/<<parameters.slug>>.$BUILD_VERSION.json
      - store_artifacts:
          path: build
      - persist_to_workspace:
          root: .
          paths:
            - build

  plugin-deploy:
    executor: wp-product-orb/authenticate
    environment:
      WPE_SESSION_DIR: ./.wpe
    parameters:
      auth_url:
        type: string
      upload_url:
        type: string
      slug:
        type: string
    steps:
      - attach_workspace:
          at: .
      - wp-product-orb/variable-load
      - wp-product-orb/authenticate:
          user: WPE_LDAP_USER
          pass: WPE_LDAP_PASS
          url: <<parameters.auth_url>>
      - wp-product-orb/post-zip:
          url: <<parameters.upload_url>>/<<parameters.slug>>
          zip: build/<<parameters.slug>>.$BUILD_VERSION.zip
          json: build/<<parameters.slug>>.$BUILD_VERSION.json
          version: $BUILD_VERSION

  plugin-npm-build:
    executor:
      name: node/default
      tag: lts
    parameters:
      slug:
        type: string
    working_directory: .
    steps:
      - attach_workspace:
          at: .
      - node/install-packages:
          app-dir: <<parameters.slug>>
      - run:
          name: NPM build
          command: |
            npm run build
          working_directory: <<parameters.slug>>
      - persist_to_workspace:
          root: .
          paths:
            - .

  plugin-e2e-test:
    docker:
      - image: circleci/php:7.4-node-browsers
      - image: circleci/mysql:5.7-ram
        environment:
          MYSQL_ROOT_PASSWORD: wordpress
          MYSQL_DATABASE: wordpress
          MYSQL_USER: wordpress
          MYSQL_PASSWORD: wordpress
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Install mysql_client
          command: |
            sudo apt-get install default-mysql-client

      - run:
          name: Install MySQL PHP extension
          command: sudo docker-php-ext-install mysqli zip pdo_mysql

      - run:
          # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1

      - run:
          name: Install WP-CLI
          command: |
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            ./wp-cli.phar --info

      - run:
          name: Download WordPress
          command: |
            mkdir /tmp/wordpress
            ./wp-cli.phar core download  --path=/tmp/wordpress --version=latest

      - run:
          name: Set up wp-config file
          command: |
            ./wp-cli.phar config create --path=/tmp/wordpress --dbname=wordpress --dbuser=root --dbpass=wordpress --dbhost=127.0.0.1:3306 --force --extra-php \<<PHP
            define( 'WP_SITEURL', 'http://localhost:5501' );
            define( 'WP_HOME', 'http://localhost:5501' );
            PHP

      - run:
          name: Install WordPress
          command: |
            ./wp-cli.phar core install --path=/tmp/wordpress --url=http://localhost:5501 --title="WPE Headless Testing" --admin_user=admin --admin_password=password --admin_email=admin@example.com --skip-email

      - run:
          name: Activate wpe-content-model plugin
          command: |
            ln -s ~/project/wpe-content-model /tmp/wordpress/wp-content/plugins/wpe-content-model
            ./wp-cli.phar plugin activate --path=/tmp/wordpress wpe-content-model

      - run:
          name: Install WPGraphQL
          command: |
            ./wp-cli.phar plugin install --path=/tmp/wordpress wp-graphql --activate

      - run:
          working_directory: /home/circleci/project/wpe-content-model
          name: Create database dump for Codeception
          command: |
            mkdir -p tests/_data
            ~/project/wp-cli.phar --path=/tmp/wordpress db export tests/_data/dump.sql
            ls -lah tests/_data/dump.sql

      - run:
          name: Start php server
          command: |
            php -S localhost:5501 -t /tmp/wordpress
          background: true

      - run:
          name: Install Chromedriver
          command: |
            mkdir bin
            curl -O https://chromedriver.storage.googleapis.com/90.0.4430.24/chromedriver_linux64.zip
            unzip chromedriver_linux64.zip
            rm chromedriver_linux64.zip
            mv chromedriver bin/

      - run:
          name: Start Chromedriver
          command: |
            ~/project/bin/chromedriver --url-base=/wd/hub
          background: true

      - run:
          working_directory: /home/circleci/project/wpe-content-model
          name: Set up Codeception files
          command: |
            cp .env.testing.circleci .env.testing
            cp tests/acceptance.suite.circleci.yml tests/acceptance.suite.yml

      - run:
          working_directory: /home/circleci/project/wpe-content-model
          name: Run Codeception
          command: |
            vendor/bin/codecept build
            vendor/bin/codecept -vvv run acceptance --xml="tests/_output/results.xml" --no-interaction

      - store_test_results:
          path: wpe-content-model/tests/_output

      - store_artifacts:
          path: wpe-content-model/tests/_output

workflows:
  # Workflows defined for each package and plugin.
  # tag example for deploying an update for wpe-content-model: 1.0.0
  plugin:
    jobs:
      - checkout:
          slug: wpe-content-model
          filters:
            tags:
              only: /.*/
      - plugin-checkout:
          slug: wpe-content-model
          filename: wpe-content-model.php
          requires:
            - checkout
          # run this job for any build, any branch
          filters:
            tags:
              only: /.*/
      - plugin-composer:
          slug: wpe-content-model
          requires:
            - plugin-checkout
          # run this job for any build, any branch
          filters:
            tags:
              only: /.*/
      - plugin-test:
          slug: wpe-content-model
          requires:
            - plugin-composer
          # run this job for any build, any branch
          filters:
            tags:
              only: /.*/
      - lint:
          slug: wpe-content-model
          requires:
            - plugin-test
          # run this job for any build, any branch
          filters:
            tags:
              only: /.*/
      - plugin-npm-build:
          slug: wpe-content-model
          requires:
            - lint
          # run this job for any build, any branch
          filters:
            tags:
              only: /.*/
      - plugin-e2e-test:
          requires:
            - plugin-npm-build
          # run this job for any build, any branch
          filters:
            tags:
              only: /.*/
      - plugin-bundle-zip:
          slug: wpe-content-model
          requires:
            - plugin-e2e-test
          # Run this job on every commit/PR so the plugin is available as a build artifact
          filters:
            tags:
              only: /.*/
      - plugin-bundle-json:
          slug: wpe-content-model
          requires:
            - plugin-test
          # Run this job on every commit/PR to make sure it's in working order prior to deploying
          filters:
            tags:
              only: /.*/
      - plugin-deploy:
          name: "Deploy zip to api (staging) wpe-content-model"
          slug: wpe-content-model
          requires:
            - plugin-bundle-zip
            - plugin-bundle-json
          filters:
            branches:
              only:
                - main
                - canary
            tags:
              only: /.*/
          context: wpe-ldap-creds
          auth_url: https://auth-staging.wpengine.io/v1/tokens
          upload_url: https://wp-product-info-staging.wpesvc.net/v1/plugins
      - plugin-deploy:
          name: "Deploy zip to api (production) wpe-content-model"
          slug: wpe-content-model
          requires:
            - "Deploy zip to api (staging) wpe-content-model"
          filters:
            branches:
              ignore: /.*/
            tags:
              # tag ex. 1.0.0
              only: /^\S+/
          context: wpe-ldap-creds
          auth_url: https://auth.wpengine.io/v1/tokens
          upload_url: https://wp-product-info.wpesvc.net/v1/plugins
